{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["init","store","createStore","state","arguments","length","undefined","action","type","text","App","e","this","props","edit","target","value","console","log","react_default","a","createElement","className","App_Header","id","onChange","handleChange","bind","dangerouslySetInnerHTML","__html","marked","concat","React","Component","Header","_ref","Container","connect","dispatch","editing","Show","es","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAyBMA,SAAI,mrCA2DJC,EAAQC,YA1EE,WAAqB,IAApBC,EAAoBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAdJ,EAAKO,EAASH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnC,OAAQC,EAAOC,MACb,IAJQ,OAKN,OAAOD,EAAOE,KACf,QACC,OAAON,KAsEPO,uLACUC,GACZC,KAAKC,MAAMC,KAAKH,EAAEI,OAAOC,wCAIzB,OADAC,QAAQC,IAAIN,KAAKC,MAAMJ,MAEvBU,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BADJ,IAC4BF,EAAAC,EAAAC,cAAA,WACxBF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAQd,KAAK,WACjBU,EAAAC,EAAAC,cAAA,YACEG,GAAK,SACThB,KAAM,OACNiB,SAAWb,KAAKc,aAAaC,KAAKf,MAClCI,MAAOJ,KAAKC,MAAMJ,QAIdU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAQd,KAAK,YAClBU,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UAAUI,wBAAyB,CAACC,OAAQC,IAAM,GAAAC,OAAInB,KAAKC,MAAMJ,oBAtB9DuB,IAAMC,WA8BlBC,EAAS,SAAAC,GAAU,IAAR1B,EAAQ0B,EAAR1B,KACf,OACDU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,IAA0Bb,IAGrB2B,EAAYC,YAhDM,SAAClC,GACvB,MAAO,CACLM,KAAMN,IAGgB,SAACmC,GACzB,MAAO,CACLxB,KAAO,SAACL,GACN6B,EA7DU,SAAC7B,GACf,MAAO,CACLD,KAbQ,OAcRC,KAAOA,GA0DI8B,CAAQ9B,OAwCL4B,CAA6C3B,GAYhD8B,mLATX,OACCrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAUxC,MAAOA,GACdkB,EAAAC,EAAAC,cAACe,EAAD,cAJWJ,IAAMC,WC7GLS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a89c85d8.chunk.js","sourcesContent":["import React from 'react'\nimport { Provider ,connect} from 'react-redux'\n\nimport { createStore, combineReducers} from 'redux';\nimport marked from 'marked';\nimport \"./App.sass\"\n\n\nconst EDIT =\"EDIT\"\n\nconst reducer = (state=init,action)=>{\n  switch (action.type){\n    case EDIT:\n      return action.text\n     default : \n      return state\n      \n  }\n}\nconst editing = (text) =>{\n  return {\n    type :EDIT ,\n    text : text\n  }\n}\nconst init =`# Welcome to my React Markdown Previewer! \n\n## This is a sub-heading...   \n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nconst mapStateToProps = (state) =>{\n  return {\n    text :state\n  }\n}\nconst mapDispatchToProps =(dispatch) =>{\n  return {\n    edit : (text)=>{\n      dispatch(editing(text))\n    }\n  }\n}\nconst store = createStore(reducer)\nclass App extends React.Component{\n  handleChange (e){\n    this.props.edit(e.target.value)\n  }\n  render(){\n    console.log(this.props.text)\n    return (\n    <div>\n        <h1>Hello Testing </h1> <br />\n        <div className=\"markdownSection\">\n          <div className=\"editorWrapper\">\n            <Header text=\"Editor\" />\n        <textarea \n          id = 'editor'\n      type =\"text\"\n      onChange ={this.handleChange.bind(this)}\n      value={this.props.text}>\n      \n    </textarea>\n          </div>\n          <div className=\"previewWrapper\">\n            <Header text=\"Preview\" />\n       <div id='preview' dangerouslySetInnerHTML={{__html: marked(`${this.props.text}`)}} /> \n        </div> \n        </div>\n      </div>\n    )\n  }\n}\n\nconst Header = ({text})=>{\n  return (\n <div className=\"Header\"> {text}</div>\n  )\n}\nconst Container = connect(mapStateToProps, mapDispatchToProps)(App);\nclass Show extends React.Component {\n  render(){\n    return(\n     <Provider store={store} >\n        <Container />\n     </Provider>   \n    )\n  }\n}\n\n\nexport default Show","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}